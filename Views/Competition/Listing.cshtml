@model IEnumerable<FYP_QS_CODE.Models.Schedule>
@using FYP_QS_CODE.Models 
@{
    ViewData["Title"] = "Competitions";
    var today = DateTime.Today;

    // Helper function (copied from Schedule/Index)
    string GetFriendlyDateString(DateTime date)
    {
        if (date == today) return "Today";
        if (date == today.AddDays(1)) return "Tomorrow";
        return date.ToString("dddd, dd MMM yyyy");
    }

    // --- Modified Filter ---
    // 1. Filter for Competition type
    // 2. Filter for future/ongoing competitions (StartTime >= today)
    var competitions = Model.Where(s => s.ScheduleType == ScheduleType.Competition &&
                                      s.StartTime.HasValue &&
                                      s.StartTime.Value.Date >= today)
                         .OrderBy(s => s.StartTime);

    // --- New Grouping (copied from Schedule/Index) ---
    // Group by Date
    var groupedByDay = competitions.GroupBy(g => g.StartTime.Value.Date).OrderBy(g => g.Key);
}

<div class="container mt-4 page-wrapper">
    <h2 class="mb-4">Upcoming Competitions</h2>

    @if (!groupedByDay.Any())
    {
        <p class="text-muted">No upcoming competitions found.</p>
    }

    @foreach (var dayGroup in groupedByDay)
    {
        // Use the helper for the main date title
        <h4 class="mt-5 mb-3" style="border-bottom: 2px solid #eee; padding-bottom: 5px;">
            @GetFriendlyDateString(dayGroup.Key)
        </h4>

        // Group this day's competitions by the specific time
        var groupedByTime = dayGroup.GroupBy(g => g.StartTime.Value.TimeOfDay).OrderBy(tg => tg.Key);

        @foreach (var timeGroup in groupedByTime)
        {
            // Time subtitle
            <h6 class="text-muted mt-3">@timeGroup.First().StartTime.Value.ToString("hh:mm tt")</h6>

            // Use the original competition card layout in a grid
            <div class="row row-cols-1 row-cols-md-2 g-4">
                @foreach (var competition in timeGroup)
                {
                    <div class="col">
                        <div class="card h-100 shadow-sm competition-card" 
                             onclick="location.href='@Url.Action("CompDetails", "Competition", new { id = competition.ScheduleId })'">
                            
                            @if (!string.IsNullOrEmpty(competition.CompetitionImageUrl))
                            {
                                <img src="@Url.Content(competition.CompetitionImageUrl)" class="card-img-top" alt="@competition.GameName Poster" style="height: 200px; object-fit: cover;">
                            }
                            else
                            {
                                // Placeholder image if no poster
                                <div class="card-img-top" style="height: 200px; background-color: #495057; display: flex; align-items: center; justify-content: center; color: white; font-weight: 500; font-size: 1.2rem;">
                                    <span>No Poster</span>
                                </div>
                            }
                            
                            <div class="card-body">
                                <h5 class="card-title">@competition.GameName</h5>
                                
                                @if(competition.Status == ScheduleStatus.PendingSetup)
                                {
                                    <span class="badge bg-warning text-dark mb-2">Pending Setup</span>
                                }
                                else
                                {
                                    <span class="badge bg-success mb-2">@competition.Status?.ToString()</span>
                                }

                                <p class="card-text mb-1 small"><i class="bi bi-geo-alt-fill me-1"></i> @competition.Location</p>
                                <p class="card-text mb-1 small">
                                    <i class="bi bi-calendar-event me-1"></i>
                                    @competition.StartTime?.ToString("MMM d") - @competition.EndTime?.ToString("MMM d, yyyy")
                                </p>
                                <p class="card-text small"><i class="bi bi-trophy-fill me-1"></i> @competition.NumTeam Teams</p>
                            </div>
                            <div class="card-footer bg-white border-top-0 pb-3">
                                <small class="text-danger">Registration Closes: @competition.RegClose?.ToString("MMM d")</small>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    }
</div>

<style>
    .competition-card {
        cursor: pointer;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }
    .competition-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 .5rem 1rem rgba(0,0,0,.15)!important;
    }
</style>