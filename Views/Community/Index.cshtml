@model IEnumerable<Schedule>
@using FYP_QS_CODE.Models
@{
    ViewData["Title"] = "Community Hub";
}

<div class="container-fluid mt-4"> @* Use container-fluid for potentially wider layout *@
    <div class="row">

        @* --- Left Column (Placeholder) --- *@
        <div class="col-lg-3 d-none d-lg-block"> @* Hide on smaller screens *@
            <div class="card sticky-top" style="top: 20px;">
                <div class="card-body">
                    <h5 class="card-title">Community Info</h5>
                    <p class="card-text">Placeholder for community details, quick links, etc.</p>
                    @* Add community specific info here *@
                     <a asp-action="CreateOneOff" asp-controller="Community" class="btn btn-sm btn-outline-success mb-2 w-100">Create One-Off</a>
                     <a asp-action="CreateRecurring" asp-controller="Community" class="btn btn-sm btn-outline-success mb-2 w-100">Create Recurring</a>
                     <a asp-action="CreateCompetition" asp-controller="Community" class="btn btn-sm btn-outline-success w-100">Create Competition</a>
                </div>
            </div>
        </div>

        @* --- Center Content Column --- *@
        <div class="col-lg-6 col-md-8"> @* Takes up more space *@

             @* --- TABS START --- *@
            <ul class="nav nav-tabs mb-3" id="communityMainTabs" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="activity-tab" data-bs-toggle="tab" data-bs-target="#activity-tab-pane" type="button" role="tab" aria-controls="activity-tab-pane" aria-selected="true">Activity</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link disabled" id="chat-tab" data-bs-toggle="tab" data-bs-target="#chat-tab-pane" type="button" role="tab" aria-controls="chat-tab-pane" aria-selected="false">Chat</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link disabled" id="members-tab" data-bs-toggle="tab" data-bs-target="#members-tab-pane" type="button" role="tab" aria-controls="members-tab-pane" aria-selected="false">Members</button>
                </li>
            </ul>

            <div class="tab-content" id="communityMainTabsContent">
                @* --- ACTIVITY TAB PANE --- *@
                <div class="tab-pane fade show active" id="activity-tab-pane" role="tabpanel" aria-labelledby="activity-tab" tabindex="0">

                    @* --- Games Section --- *@
                    <h4 class="mb-3">Games Schedule</h4>
                    <div class="row row-cols-1 row-cols-md-2 g-4 mb-4"> @* Using 2 cols in center *@
                        @foreach (var game in Model.Where(s => s.ScheduleType == ScheduleType.OneOff || s.ScheduleType == ScheduleType.Recurring))
                        {
                            <div class="col">
                                <div class="card h-100 shadow-sm">
                                    <div class="card-body d-flex flex-column">
                                        <h5 class="card-title">@game.GameName</h5>
                                        @if(game.EventTag.HasValue && game.EventTag != EventTag.None) // Hide "None" tag
                                        {
                                            <span class="badge bg-primary mb-2 align-self-start">@game.EventTag.ToString()</span>
                                        }
                                        <p class="card-text mb-1 small"><i class="bi bi-geo-alt-fill me-1"></i> @game.Location</p>
                                        <p class="card-text mb-1 small">
                                            <i class="bi bi-calendar-event me-1"></i>
                                            @if (game.StartTime.HasValue) {
                                                if(game.ScheduleType == ScheduleType.Recurring) {
                                                    <span>Every @game.RecurringWeek?.ToString(), @game.StartTime.Value.ToString("t")</span>
                                                } else {
                                                    <span>@game.StartTime.Value.ToString("ddd, MMM d, H:mm")</span>
                                                }
                                            }
                                        </p>
                                        <p class="card-text small"><i class="bi bi-people-fill me-1"></i> @game.NumPlayer players</p>
                                        <div class="mt-auto pt-2">
                                            <a asp-controller="Schedule" asp-action="Details" asp-route-id="@game.ScheduleId" class="btn btn-sm btn-outline-primary w-100">View Details</a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                        @if (!Model.Any(s => s.ScheduleType == ScheduleType.OneOff || s.ScheduleType == ScheduleType.Recurring)) {
                            <p class="text-muted">No regular games scheduled.</p>
                        }
                    </div>

                    <hr />

                    @* --- Competitions Section --- *@
                     <h4 class="mb-3 mt-4">Competitions</h4>
                     <div class="row row-cols-1 row-cols-md-2 g-4"> @* Using 2 cols in center *@
                         @foreach (var comp in Model.Where(s => s.ScheduleType == ScheduleType.Competition))
                         {
                             <div class="col">
                                 <div class="card h-100 shadow-sm">
                                     <div class="card-body d-flex flex-column">
                                        <h5 class="card-title">@comp.GameName</h5>
                                        <p class="card-text mb-1 small"><i class="bi bi-geo-alt-fill me-1"></i> @comp.Location</p>
                                        <p class="card-text mb-1 small">
                                            <i class="bi bi-calendar-event me-1"></i>
                                            @if (comp.StartTime.HasValue) {
                                                <span>@comp.StartTime.Value.ToString("ddd, MMM d")</span>
                                                <small class="text-muted"> (@comp.StartTime.Value.ToString("t") - @comp.EndTime?.ToString("t"))</small>
                                            }
                                        </p>
                                        <p class="card-text small"><i class="bi bi-trophy-fill me-1"></i> @comp.NumTeam Teams</p>

                                        @* Status and Action Buttons *@
                                        @if (comp.Status == ScheduleStatus.PendingSetup)
                                        {
                                            <span class="badge bg-warning text-dark align-self-start mb-2"><i class="bi bi-exclamation-triangle-fill me-1"></i> Pending Match Setup</span>
                                            <div class="mt-auto pt-2 d-grid gap-2 d-sm-flex justify-content-sm-between"> @* Flex layout for buttons *@
                                                <a asp-controller="Community" asp-action="SetupMatch" asp-route-id="@comp.ScheduleId" class="btn btn-sm btn-warning mb-1 mb-sm-0">Continue Setup</a>
                                                <form asp-controller="Community" asp-action="Publish" asp-route-id="@comp.ScheduleId" method="post" onsubmit="return confirm('Publish this competition? Default format settings will be used if setup is incomplete.')" class="d-inline-block">
                                                     @Html.AntiForgeryToken()
                                                    <button type="submit" class="btn btn-sm btn-info w-100">Publish Now</button>
                                                </form>
                                            </div>
                                        }
                                        else // Active, Past, etc.
                                        {
                                            // Determine badge color based on status
                                            string statusBadgeClass = "bg-secondary"; // Default
                                            if (comp.Status == ScheduleStatus.Active) { statusBadgeClass = "bg-success"; }
                                            else if (comp.Status == ScheduleStatus.Past) { statusBadgeClass = "bg-dark"; }
                                            // Add more conditions if needed

                                            <span class="badge @statusBadgeClass align-self-start mb-2">@comp.Status?.ToString()</span>
                                             <div class="mt-auto pt-2">
                                                 <a asp-controller="Competition" asp-action="CompDetails" asp-route-id="@comp.ScheduleId" class="btn btn-sm btn-outline-primary w-100">View Competition</a>
                                             </div>
                                        }
                                     </div>
                                 </div>
                             </div>
                         }
                         @if (!Model.Any(s => s.ScheduleType == ScheduleType.Competition)) {
                             <p class="text-muted">No competitions scheduled.</p>
                         }
                    </div>

                </div> @* End Activity Tab Pane *@

                @* --- CHAT TAB PANE (Placeholder) --- *@
                <div class="tab-pane fade" id="chat-tab-pane" role="tabpanel" aria-labelledby="chat-tab" tabindex="0">
                    <h4>Chat</h4>
                    <p>Community chat feature coming soon.</p>
                     @* Link to ChatController if implemented *@
                     @* <a asp-controller="Chat" asp-action="Index">Go to Chat</a> *@
                </div>

                @* --- MEMBERS TAB PANE (Placeholder) --- *@
                 <div class="tab-pane fade" id="members-tab-pane" role="tabpanel" aria-labelledby="members-tab" tabindex="0">
                    <h4>Members</h4>
                    <p>Community member list coming soon.</p>
                     @* Add member listing logic here later *@
                </div>

            </div> @* End Tab Content *@


        </div> @* End Center Column *@

         @* --- Right Column (Placeholder) --- *@
        <div class="col-lg-3 d-none d-lg-block"> @* Hide on smaller screens *@
             <div class="card sticky-top" style="top: 20px;">
                <div class="card-body">
                    <h5 class="card-title">Announcements</h5>
                    <p class="card-text">Placeholder for announcements or upcoming events.</p>
                </div>
            </div>
        </div>

    </div> @* End Row *@
</div> @* End Container *@

@section Scripts {
    <script>
        // Optional: Add JS if needed for dynamic loading or interactions later
        // Example: Activate tab from URL hash if needed
        // document.addEventListener('DOMContentLoaded', function() {
        //     var hash = window.location.hash;
        //     if (hash) {
        //         var triggerEl = document.querySelector('#communityMainTabs button[data-bs-target="' + hash + '"]');
        //         if (triggerEl) {
        //             var tab = new bootstrap.Tab(triggerEl);
        //             tab.show();
        //         }
        //     }
        // });
    </script>
}